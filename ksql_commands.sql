
------ CUSTOMER TABLE CREATION QUERY ---------
CREATE TABLE customer (customer_id SERIAL PRIMARY KEY,
account_no VARCHAR(30) NOT NULL,
balance FLOAT,
credit_score INTEGER);

------ LOAN_REQUEST TABLE CREATION QUERY ---------
CREATE TABLE loan_request(loan_id SERIAL PRIMARY KEY,
source VARCHAR(10),
loan_amount_req FLOAT, 
tenure INTEGER,
salary FLOAT,
collateral_amount FLOAT,
pan_number VARCHAR(20), 
contact_no VARCHAR(10), 
cust_id BIGINT);

------ EXTERNAL_CREDIT_SCORE TABLE CREATION QUERY ---------
CREATE TABLE external_credit_score(pan_number VARCHAR(20) PRIMARY KEY,
credit_score INTEGER);

---- CUSTOMER_LOAN_STATUS TABLE CREATION QUERY ---------
create table customer_loan_status(
loan_id BIGINT PRIMARY KEY,
source VARCHAR(10), 
tenure INTEGER,
salary FLOAT,
collateral_amount FLOAT,
pan_number VARCHAR(20),
contact_no VARCHAR(10),
credit_score INTEGER,
eligible_amount FLOAT,
total_loan_amount FLOAT,
loan_status VARCHAR(10));


---- VENDOR_LOAN_STATUS TABLE CREATION QUERY ---------
create table vendor_loan_status(
loan_id BIGINT PRIMARY KEY,
source VARCHAR(10), 
tenure INTEGER,
salary FLOAT,
collateral_amount FLOAT,
pan_number VARCHAR(20),
contact_no VARCHAR(10),
credit_score INTEGER,
eligible_amount FLOAT,
total_loan_amount FLOAT,
loan_status VARCHAR(10));

-- To Create Read only user role
CREATE ROLE read_only_user WITH LOGIN PASSWORD 'Test1234';
GRANT CONNECT ON DATABASE postgres TO read_only_user;
GRANT USAGE ON SCHEMA public TO read_only_user;
GRANT SELECT ON TABLE public.customer TO read_only_user;
GRANT SELECT ON TABLE public.external_credit_score TO read_only_user;
GRANT SELECT ON TABLE public.loan_request TO read_only_user;
GRANT rds_replication to read_only_user;

-- To Create write only user role
CREATE ROLE write_only_user WITH LOGIN PASSWORD 'Test1234';
GRANT CONNECT ON DATABASE postgres TO write_only_user;
GRANT USAGE ON SCHEMA public TO write_only_user;
GRANT SELECT, INSERT, UPDATE ON TABLE public."CUSTOMER_LOAN_STATUS" TO write_only_user;
GRANT SELECT, INSERT, UPDATE ON TABLE public."VENDOR_LOAN_STATUS" TO write_only_user;
GRANT rds_replication to write_only_user;


----- CUSTOMER TABLE DATA INSERTION QUERY -------
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403032', 20000, 700);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403033', 30000, 400);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403034', 100000, 800);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403035', 200000, 760);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403036', 30000, 600);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403037', 55000, 650);


----- EXTERNAL_CREDIT_SCORE TABLE DATA INSERTION QUERY -------
INSERT INTO external_credit_score VALUES ('ABCKT23231', 600);
INSERT INTO external_credit_score VALUES ('ABCKT23243', 700);
INSERT INTO external_credit_score VALUES ('ABCKT23254', 800);
INSERT INTO external_credit_score VALUES ('ABCKT23157', 400);
INSERT INTO external_credit_score VALUES ('ABCKT23876', 450);
INSERT INTO external_credit_score VALUES ('ABCKT23975', 670);


------ LOAN_REQUEST TABLE DATA INSERTION QUERY --------------
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 1000000, 36, 50000, 400000, 'ABCKT23231', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 500000, 6, 50000, 0, 'ABCKT23243', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 200000, 48, 30000, 100000, 'ABCKT23254', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 100000, 9, 10000, 0, 'ABCKT23157', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 200000, 24, 30000, 400000, 'ABCKT23876', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 1000000, 36, 100000, 400000, 'BRBKT23251', '1234567890', 1);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 700000, 60, 80000, 500000, 'BRBKT23252', '1234567890', 2);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 1500000, 48, 90000, 1000000, 'BRBKT23253', '1234567890', 3);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 2000000, 120, 50000, 1000000, 'BRBKT23254', '1234567890', 4);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 1000000, 12, 50000, 0, 'BRBKT23255', '1234567890', 5);



------------- KSQL DB QUERIES --------------------

-------- EXTERNAL_CREDIT_SCORE TABLE CREATION QUERY ----------
CREATE TABLE EXTERNAL_CREDIT_BUREAU WITH (VALUE_FORMAT='AVRO', KAFKA_TOPIC='EXTERNAL_CREDIT_BUREAU_TABLE') AS
SELECT PAN_NUMBER AS PAN_NUMBER, LATEST_BY_OFFSET(CREDIT_SCORE) AS CREDIT_SCORE
FROM  BFB_SOURCEPUBLICEXTERNAL_CREDIT_SCORE GROUP BY PAN_NUMBER ;

-------- CUSTOMER TABLE CREATION QUERY ----------
CREATE TABLE CUSTOMER WITH (VALUE_FORMAT='AVRO', KAFKA_TOPIC='CUSTOMER_TABLE') AS
SELECT CUSTOMER_ID AS CUSTOMER_ID, 
LATEST_BY_OFFSET(ACCOUNT_NO) AS ACCOUNT_NO,
LATEST_BY_OFFSET(BALANCE) AS BALANCE,
LATEST_BY_OFFSET(CREDIT_SCORE) AS CREDIT_SCORE
FROM BFB_SOURCEPUBLICCUSTOMER GROUP BY CUSTOMER_ID ;

-------- LOAN_REQUEST STREAM CREATION QUERY (TO FETCH SELECTED COLUMNS) ----------
CREATE STREAM LOAN_REQUESTS WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='LOAN_REQUESTS') AS
SELECT L.loan_id AS LOAN_ID,
L."SOURCE" AS "SOURCE", 
L.LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
L.TENURE AS TENURE,
L.SALARY AS SALARY,
L.COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
L.PAN_NUMBER AS PAN_NUMBER, 
L.CONTACT_NO AS CONTACT_NO,
L.CUST_ID AS CUSTOMER_ID
FROM  BFB_SOURCEPUBLICLOAN_REQUEST AS L;

-------- CUSTOMER_LOAN_ENRICHED STREAM CREATION QUERY ----------
CREATE STREAM BFB_CUSTOMER_LOAN_ENRICHED WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='BFB_CUSTOMER_LOAN_ENRICHED') AS
SELECT L.LOAN_ID AS LOAN_ID,
L."SOURCE" AS "SOURCE", 
L.LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
L.TENURE AS TENURE,
L.SALARY AS SALARY,
L.COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
L.PAN_NUMBER AS PAN_NUMBER, 
L.CONTACT_NO AS CONTACT_NO, 
C.CUSTOMER_ID AS CUSTOMER_ID,
C.ACCOUNT_NO AS ACCOUNT_NO,
C.BALANCE AS BALANCE,
C.CREDIT_SCORE AS CREDIT_SCORE
FROM LOAN_REQUESTS AS L INNER JOIN CUSTOMER AS C
ON CAST(L.CUSTOMER_ID AS INTEGER)=C.CUSTOMER_ID;

-------- VENDOR_LOAN_ENRICHED STREAM CREATION QUERY ----------
CREATE STREAM VENDOR_LOAN_ENRICHED WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='VENDOR_LOAN_ENRICHED') AS
SELECT L.LOAN_ID AS LOAN_ID,
L."SOURCE" AS "SOURCE", 
L.LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
L.TENURE AS TENURE,
L.SALARY AS SALARY,
L.COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
L.PAN_NUMBER AS PAN_NUMBER, 
L.CONTACT_NO AS CONTACT_NO,
L.CUSTOMER_ID AS CUSTOMER_ID,
C.CREDIT_SCORE AS CREDIT_SCORE
FROM LOAN_REQUESTS AS L INNER JOIN EXTERNAL_CREDIT_BUREAU AS C
ON L.PAN_NUMBER=C.PAN_NUMBER;

CREATE STREAM VENDOR_LOAN_ELIGIBILITY WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='VENDOR_LOAN_ELIGIBILITY') AS 
SELECT
    LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    CASE
        WHEN CREDIT_SCORE < 550 THEN CAST(0 AS DOUBLE)
        ELSE ROUND(((SALARY * TENURE * 0.6) + (COLLATERAL_AMOUNT * 0.8)), 2)
    END AS ELIGIBLE_AMOUNT,
        ROUND((((LOAN_AMOUNT_REQ * 0.009167 * POWER(1.009167, TENURE)) / (POWER(1.009167, TENURE) - 1)) * TENURE), 2) AS TOTAL_LOAN_AMOUNT
FROM
    VENDOR_LOAN_ENRICHED;

CREATE STREAM VENDOR_LOAN_STATUS WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='VENDOR_LOAN_STATUS') AS 
SELECT
    LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
    TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
    CASE
        WHEN TOTAL_LOAN_AMOUNT <= ELIGIBLE_AMOUNT THEN 'APPROVE'
        ELSE 'REJECT'
    END AS LOAN_STATUS
FROM
    VENDOR_LOAN_ELIGIBILITY;

CREATE STREAM BFB_CUSTOMER_LOAN_ELIGIBILITY WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='BFB_CUSTOMER_LOAN_ELIGIBILITY') AS 
SELECT LOAN_ID AS LOAN_ID,
"SOURCE" AS "SOURCE", 
LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
TENURE AS TENURE,
SALARY AS SALARY,
COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
PAN_NUMBER AS PAN_NUMBER, 
CONTACT_NO AS CONTACT_NO, 
CUSTOMER_ID AS CUSTOMER_ID,
ACCOUNT_NO AS ACCOUNT_NO,
BALANCE AS BALANCE,
CREDIT_SCORE AS CREDIT_SCORE,
CASE
    WHEN CREDIT_SCORE < 550 THEN CAST(0 AS DOUBLE)
    ELSE ROUND(((SALARY * TENURE * 0.6) + (COLLATERAL_AMOUNT * 0.8) + (BALANCE * 0.6)), 2)
END AS ELIGIBLE_AMOUNT,
    ROUND((((LOAN_AMOUNT_REQ * 0.0075 * POWER(1.0075, TENURE)) / (POWER(1.0075, TENURE) - 1)) * TENURE), 2) AS TOTAL_LOAN_AMOUNT
FROM
    BFB_CUSTOMER_LOAN_ENRICHED;



CREATE STREAM CUSTOMER_LOAN_STATUS WITH(VALUE_FORMAT='AVRO', KAFKA_TOPIC='CUSTOMER_LOAN_STATUS') AS 
SELECT
    LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
    TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
    CASE
        WHEN TOTAL_LOAN_AMOUNT <= ELIGIBLE_AMOUNT THEN 'APPROVE'
        ELSE 'REJECT'
    END AS LOAN_STATUS
FROM
    BFB_CUSTOMER_LOAN_ELIGIBILITY;


-- CREATE STREAM LOAN_STATUS_COMBINED AS
-- SELECT LOAN_ID AS LOAN_ID,
--     "SOURCE" AS "SOURCE", 
--     LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
--     TENURE AS TENURE,
--     SALARY AS SALARY,
--     COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
--     PAN_NUMBER AS PAN_NUMBER, 
--     CONTACT_NO AS CONTACT_NO, 
--     CREDIT_SCORE AS CREDIT_SCORE,
--     CUSTOMER_ID AS CUSTOMER_ID,
--     ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
--     TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
--     LOAN_STATUS AS LOAN_STATUS 
-- FROM
--     CUSTOMER_LOAN_STATUS;

-- INSERT INTO LOAN_STATUS_COMBINED 
-- SELECT LOAN_ID AS LOAN_ID,
--     "SOURCE" AS "SOURCE", 
--     LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
--     TENURE AS TENURE,
--     SALARY AS SALARY,
--     COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
--     PAN_NUMBER AS PAN_NUMBER, 
--     CONTACT_NO AS CONTACT_NO, 
--     CREDIT_SCORE AS CREDIT_SCORE,
--     CUSTOMER_ID AS CUSTOMER_ID,
--     ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
--     TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
--     LOAN_STATUS AS LOAN_STATUS
--     FROM VENDOR_LOAN_STATUS;

CREATE STREAM IF NOT EXISTS BFB_SOURCE_PUBLICEXTERNAL_CREDIT_SCORE (BEFORE STRUCT<PAN_NUMBER STRING, CREDIT_SCORE INTEGER>, AFTER STRUCT<PAN_NUMBER STRING, CREDIT_SCORE INTEGER>, SOURCE STRUCT<VERSION STRING, `CONNECTOR` STRING, NAME STRING, TS_MS BIGINT, SNAPSHOT STRING, DB STRING, SEQUENCE STRING, SCHEMA STRING, `TABLE` STRING, TXID BIGINT, LSN BIGINT, XMIN BIGINT>, OP STRING, TS_MS BIGINT, TRANSACTION STRUCT<ID STRING, TOTAL_ORDER BIGINT, DATA_COLLECTION_ORDER BIGINT>) WITH (CLEANUP_POLICY='delete', KAFKA_TOPIC='bfb_source_.public.external_credit_score', KEY_FORMAT='KAFKA', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS BFB_SOURCE_PUBLICLOAN_REQUEST (BEFORE STRUCT<LOAN_ID INTEGER, SOURCE STRING, LOAN_AMOUNT_REQ DOUBLE, TENURE INTEGER, SALARY DOUBLE, COLLATERAL_AMOUNT DOUBLE, PAN_NUMBER STRING, CONTACT_NO STRING, CUST_ID BIGINT>, AFTER STRUCT<LOAN_ID INTEGER, SOURCE STRING, LOAN_AMOUNT_REQ DOUBLE, TENURE INTEGER, SALARY DOUBLE, COLLATERAL_AMOUNT DOUBLE, PAN_NUMBER STRING, CONTACT_NO STRING, CUST_ID BIGINT>, SOURCE STRUCT<VERSION STRING, `CONNECTOR` STRING, NAME STRING, TS_MS BIGINT, SNAPSHOT STRING, DB STRING, SEQUENCE STRING, SCHEMA STRING, `TABLE` STRING, TXID BIGINT, LSN BIGINT, XMIN BIGINT>, OP STRING, TS_MS BIGINT, TRANSACTION STRUCT<ID STRING, TOTAL_ORDER BIGINT, DATA_COLLECTION_ORDER BIGINT>) WITH (CLEANUP_POLICY='delete', KAFKA_TOPIC='bfb_source_.public.loan_request', KEY_FORMAT='KAFKA', VALUE_FORMAT='AVRO');

CREATE STREAM IF NOT EXISTS BFB_SOURCE_PUBLICCUSTOMER (BEFORE STRUCT<CUSTOMER_ID INTEGER, ACCOUNT_NO STRING, BALANCE DOUBLE, CREDIT_SCORE INTEGER>, AFTER STRUCT<CUSTOMER_ID INTEGER, ACCOUNT_NO STRING, BALANCE DOUBLE, CREDIT_SCORE INTEGER>, SOURCE STRUCT<VERSION STRING, `CONNECTOR` STRING, NAME STRING, TS_MS BIGINT, SNAPSHOT STRING, DB STRING, SEQUENCE STRING, SCHEMA STRING, `TABLE` STRING, TXID BIGINT, LSN BIGINT, XMIN BIGINT>, OP STRING, TS_MS BIGINT, TRANSACTION STRUCT<ID STRING, TOTAL_ORDER BIGINT, DATA_COLLECTION_ORDER BIGINT>) WITH (CLEANUP_POLICY='delete', KAFKA_TOPIC='bfb_source_.public.customer', KEY_FORMAT='KAFKA', VALUE_FORMAT='AVRO');


