
------ CUSTOMER TABLE CREATION QUERY ---------
CREATE TABLE customer (customer_id SERIAL PRIMARY KEY,
account_no VARCHAR(30) NOT NULL,
balance FLOAT,
credit_score INTEGER);

------ LOAN_REQUEST TABLE CREATION QUERY ---------
CREATE TABLE loan_request(loan_id SERIAL PRIMARY KEY,
source VARCHAR(10),
loan_amount_req FLOAT, 
tenure INTEGER,
salary FLOAT,
collateral_amount FLOAT,
pan_number VARCHAR(20), 
contact_no VARCHAR(10), 
cust_id BIGINT);

------ EXTERNAL_CREDIT_SCORE TABLE CREATION QUERY ---------
CREATE TABLE external_credit_score(pan_number VARCHAR(20) PRIMARY KEY,
credit_score INTEGER);


----- CUSTOMER TABLE DATA INSERTION QUERY -------
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403032', 20000, 700);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403033', 30000, 400);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403034', 100000, 800);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403035', 200000, 760);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403036', 30000, 600);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403037', 55000, 650);
INSERT INTO CUSTOMER (account_no, balance, credit_score) VALUES ('403038', 34000, 550);


----- EXTERNAL_CREDIT_SCORE TABLE DATA INSERTION QUERY -------
INSERT INTO external_credit_score VALUES ('ABCKT23231', 600);
INSERT INTO external_credit_score VALUES ('ABCKT23243', 700);
INSERT INTO external_credit_score VALUES ('ABCKT23254', 800);
INSERT INTO external_credit_score VALUES ('ABCKT23157', 400);
INSERT INTO external_credit_score VALUES ('ABCKT23876', 450);
INSERT INTO external_credit_score VALUES ('ABCKT23975', 670);
INSERT INTO external_credit_score VALUES ('ABCKT23978', 650);


------ LOAN_REQUEST TABLE DATA INSERTION QUERY --------------
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 1000000, 36, 50000, 400000, 'ABCKT23231', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 500000, 6, 50000, 0, 'ABCKT23243', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 200000, 48, 30000, 100000, 'ABCKT23254', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 100000, 9, 10000, 0, 'ABCKT23157', '1234567890', null);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 200000, 24, 30000, 400000, 'ABCKT23876', '1234567890', null);

INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('vendor', 120000, 22, 35000, 400000, 'ABCKT23978', '1234567890', null);

BFB 

INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 1000000, 36, 100000, 400000, 'BRBKT23251', '1234567890', 1);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 700000, 60, 80000, 500000, 'BRBKT23252', '1234567890', 2);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 1500000, 48, 90000, 1000000, 'BRBKT23253', '1234567890', 9);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 2000000, 120, 50000, 1000000, 'BRBKT23254', '1234567890', 4);
INSERT INTO loan_request ("source", loan_amount_req, tenure, salary, collateral_amount, 
pan_number, contact_no, cust_id) VALUES
('bfb', 1000000, 12, 50000, 0, 'BRBKT23255', '1234567890', 5);



CREATE STREAM VENDOR_LOAN_ENRICHED WITH (CLEANUP_POLICY='delete', KAFKA_TOPIC='VENDOR_LOAN_ENRICHED', PARTITIONS=1, REPLICAS=3, RETENTION_MS=604800000, VALUE_FORMAT='AVRO') AS SELECT

KAFKA_TOPIC='VENDOR_LOAN_ENRICHED', RETENTION_MS=6048000000

------------- KSQL DB QUERIES --------------------

--- Create Customer stream 
CREATE STREAM BFB_SOURCE_PUBLICCUSTOMER WITH (KAFKA_TOPIC='bfb_source.public.customer', VALUE_FORMAT='AVRO');

CREATE STREAM BFB_SOURCE_PUBLICCUSTOMER WITH (KAFKA_TOPIC='bfb_source.public.customer', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000);

---- Create external credit score stream
CREATE STREAM BFB_SOURCE_PUBLICEXTERNAL_CREDIT_SCORE WITH (KAFKA_TOPIC='bfb_source.public.external_credit_score', VALUE_FORMAT='AVRO');

---- Create loan request stream
CREATE STREAM BFB_SOURCE_PUBLICLOAN_REQUEST WITH (KAFKA_TOPIC='bfb_source.public.loan_request', VALUE_FORMAT='AVRO');


-------- EXTERNAL_CREDIT_SCORE TABLE CREATION QUERY ----------
CREATE TABLE EXTERNAL_CREDIT_BUREAU WITH (KAFKA_TOPIC='external_credit_bureau', VALUE_FORMAT='AVRO') AS
SELECT PAN_NUMBER AS PAN_NUMBER, LATEST_BY_OFFSET(CREDIT_SCORE) AS CREDIT_SCORE
FROM  BFB_SOURCE_PUBLICEXTERNAL_CREDIT_SCORE GROUP BY PAN_NUMBER ;

-------- CUSTOMER TABLE CREATION QUERY ----------
CREATE TABLE customer WITH (KAFKA_TOPIC='customer', VALUE_FORMAT='AVRO') AS
SELECT CUSTOMER_ID AS CUSTOMER_ID, 
LATEST_BY_OFFSET(ACCOUNT_NO) AS ACCOUNT_NO,
LATEST_BY_OFFSET(BALANCE) AS BALANCE,
LATEST_BY_OFFSET(CREDIT_SCORE) AS CREDIT_SCORE
FROM BFB_SOURCE_PUBLICCUSTOMER GROUP BY CUSTOMER_ID;

-------- LOAN_REQUEST STREAM CREATION QUERY (TO FETCH SELECTED COLUMNS) ----------
CREATE STREAM LOAN_REQUESTS WITH(KAFKA_TOPIC='loan_requests', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS
SELECT L.loan_id AS LOAN_ID,
L."SOURCE" AS "SOURCE", 
L.LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
L.TENURE AS TENURE,
L.SALARY AS SALARY,
L.COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
L.PAN_NUMBER AS PAN_NUMBER, 
L.CONTACT_NO AS CONTACT_NO,
L.CUST_ID AS CUSTOMER_ID
FROM  BFB_SOURCE_PUBLICLOAN_REQUEST AS L;


-------- CUSTOMER_LOAN_ENRICHED STREAM CREATION QUERY ----------
CREATE STREAM BFB_CUSTOMER_LOAN_ENRICHED WITH(KAFKA_TOPIC='bfb_customer_loan_enriched', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS
SELECT L.LOAN_ID AS LOAN_ID,
L."SOURCE" AS "SOURCE", 
L.LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
L.TENURE AS TENURE,
L.SALARY AS SALARY,
L.COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
L.PAN_NUMBER AS PAN_NUMBER, 
L.CONTACT_NO AS CONTACT_NO, 
C.CUSTOMER_ID AS CUSTOMER_ID,
C.ACCOUNT_NO AS ACCOUNT_NO,
C.BALANCE AS BALANCE,
C.CREDIT_SCORE AS CREDIT_SCORE
FROM LOAN_REQUESTS AS L INNER JOIN CUSTOMER AS C
ON CAST(L.CUSTOMER_ID AS INTEGER)=C.CUSTOMER_ID;

-------- VENDOR_LOAN_ENRICHED STREAM CREATION QUERY ----------
CREATE STREAM VENDOR_LOAN_ENRICHED WITH(KAFKA_TOPIC='vendor_loan_enriched', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS
SELECT L.LOAN_ID AS LOAN_ID,
L."SOURCE" AS "SOURCE", 
L.LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
L.TENURE AS TENURE,
L.SALARY AS SALARY,
L.COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
L.PAN_NUMBER AS PAN_NUMBER, 
L.CONTACT_NO AS CONTACT_NO,
L.CUSTOMER_ID AS CUSTOMER_ID,
C.CREDIT_SCORE AS CREDIT_SCORE
FROM LOAN_REQUESTS AS L INNER JOIN EXTERNAL_CREDIT_BUREAU AS C
ON L.PAN_NUMBER=C.PAN_NUMBER;


TMKQHHHPKWKKWJDP
8i6GYDWW8PCxuNKxU8N88kMkX1o3rpj3Mh+X/y6qD4LHg32kTLHbeFEHo9V3i/EI

CREATE STREAM VENDOR_LOAN_ELIGIBILITY WITH(KAFKA_TOPIC='vendor_loan_eligibility', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS 
SELECT
    LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    CASE
        WHEN CREDIT_SCORE < 550 THEN CAST(0 AS DOUBLE)
        ELSE ROUND(((SALARY * TENURE * 0.6) + (COLLATERAL_AMOUNT * 0.8)), 2)
    END AS ELIGIBLE_AMOUNT,
        ROUND((((LOAN_AMOUNT_REQ * 0.009167 * POWER(1.009167, TENURE)) / (POWER(1.009167, TENURE) - 1)) * TENURE), 2) AS TOTAL_LOAN_AMOUNT
FROM
    VENDOR_LOAN_ENRICHED;

CREATE STREAM VENDOR_LOAN_STATUS WITH(KAFKA_TOPIC='vendor_loan_status', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS 
SELECT
    LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
    TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
    CASE
        WHEN TOTAL_LOAN_AMOUNT <= ELIGIBLE_AMOUNT THEN 'APPROVE'
        ELSE 'REJECT'
    END AS LOAN_STATUS
FROM
    VENDOR_LOAN_ELIGIBILITY;

CREATE STREAM BFB_CUSTOMER_LOAN_ELIGIBILITY WITH(KAFKA_TOPIC='bfb_customer_loan_eligibility', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS 
SELECT LOAN_ID AS LOAN_ID,
"SOURCE" AS "SOURCE", 
LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
TENURE AS TENURE,
SALARY AS SALARY,
COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
PAN_NUMBER AS PAN_NUMBER, 
CONTACT_NO AS CONTACT_NO, 
CUSTOMER_ID AS CUSTOMER_ID,
ACCOUNT_NO AS ACCOUNT_NO,
BALANCE AS BALANCE,
CREDIT_SCORE AS CREDIT_SCORE,
CASE
    WHEN CREDIT_SCORE < 550 THEN CAST(0 AS DOUBLE)
    ELSE ROUND(((SALARY * TENURE * 0.6) + (COLLATERAL_AMOUNT * 0.8) + (BALANCE * 0.6)), 2)
END AS ELIGIBLE_AMOUNT,
    ROUND((((LOAN_AMOUNT_REQ * 0.0075 * POWER(1.0075, TENURE)) / (POWER(1.0075, TENURE) - 1)) * TENURE), 2) AS TOTAL_LOAN_AMOUNT
FROM
    BFB_CUSTOMER_LOAN_ENRICHED;



CREATE STREAM BFB_CUSTOMER_LOAN_STATUS WITH(KAFKA_TOPIC='bfb_customer_loan_status', VALUE_FORMAT='AVRO', RETENTION_MS=6048000000) AS 
SELECT
    LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
    TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
    CASE
        WHEN TOTAL_LOAN_AMOUNT <= ELIGIBLE_AMOUNT THEN 'APPROVE'
        ELSE 'REJECT'
    END AS LOAN_STATUS
FROM
    BFB_CUSTOMER_LOAN_ELIGIBILITY;


-----------------------------------------------------------------------------

CREATE STREAM LOAN_STATUS_COMBINED AS
SELECT LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
    TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
    LOAN_STATUS AS LOAN_STATUS 
FROM
    CUSTOMER_LOAN_STATUS;

INSERT INTO LOAN_STATUS_COMBINED 
SELECT LOAN_ID AS LOAN_ID,
    "SOURCE" AS "SOURCE", 
    LOAN_AMOUNT_REQ AS LOAN_AMOUNT_REQ, 
    TENURE AS TENURE,
    SALARY AS SALARY,
    COLLATERAL_AMOUNT AS COLLATERAL_AMOUNT,
    PAN_NUMBER AS PAN_NUMBER, 
    CONTACT_NO AS CONTACT_NO, 
    CREDIT_SCORE AS CREDIT_SCORE,
    CUSTOMER_ID AS CUSTOMER_ID,
    ELIGIBLE_AMOUNT AS ELIGIBLE_AMOUNT,
    TOTAL_LOAN_AMOUNT AS TOTAL_LOAN_AMOUNT,
    LOAN_STATUS AS LOAN_STATUS
    FROM VENDOR_LOAN_STATUS;


Incompatible schema between results and sink. 
Result schema is `PAN_NUMBER` STRING KEY, `LOAN_ID` INTEGER, `SOURCE` STRING, `LOAN_AMOUNT_REQ` DOUBLE, 
`TENURE` INTEGER, `SALARY` DOUBLE, `COLLATERAL_AMOUNT` DOUBLE, `CONTACT_NO` STRING, `CREDIT_SCORE` INTEGER,
 `CUSTOMER_ID` BIGINT, `ELIGIBLE_AMOUNT` DOUBLE, `TOTAL_LOAN_AMOUNT` DOUBLE, `LOAN_STATUS` STRING 
 
 Sink schema is `CUSTOMER_ID` INTEGER KEY, `LOAN_ID` INTEGER, `SOURCE` STRING, `LOAN_AMOUNT_REQ` DOUBLE,
  `TENURE` INTEGER, `SALARY` DOUBLE, `COLLATERAL_AMOUNT` DOUBLE, `PAN_NUMBER` STRING, `CONTACT_NO` STRING, 
  `CREDIT_SCORE` INTEGER, `ELIGIBLE_AMOUNT` DOUBLE, `TOTAL_LOAN_AMOUNT` DOUBLE, `LOAN_STATUS` STRING